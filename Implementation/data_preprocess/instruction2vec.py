import numpy as np
import re
from gensim.models import Word2Vec


def read_asmcode_corpus(asmcode_corpus):
    asmcode_corpus = refine_asmcode(asmcode_corpus)
    list_instruction = []

    asmcode_corpus_list_split = asmcode_corpus.split('\n')

    for one_instruction in asmcode_corpus_list_split:
        one_instruction = one_instruction.replace(',', ' ')  # for split
        one_instruction = one_instruction.split()
        list_instruction.append(one_instruction)

    return list_instruction


def gen_instruction2vec_model(asmcode_corpus, vectorsize, save_filename):
    word_list = read_asmcode_corpus(asmcode_corpus)

    model = Word2Vec(word_list, size=vectorsize, window=128, min_count=1, workers=4, iter=10)

    filename = save_filename
    model.save(filename)
    return model


def refine_asmcode(raw_asmcode):
    raw_asmcode = raw_asmcode.replace("rep ", "rep")
    raw_asmcode = raw_asmcode.replace(".byte", "")
    raw_asmcode = raw_asmcode.replace('DWORD DPTR ', '')
    raw_asmcode = raw_asmcode.replace('DWORD PTR ', '')
    raw_asmcode = raw_asmcode.replace('BYTE PTR ', '')
    raw_asmcode = raw_asmcode.replace('WORD PTR ', '')
    raw_asmcode = raw_asmcode.replace('ds:', '')
    raw_asmcode = raw_asmcode.replace("es:", "")
    raw_asmcode = raw_asmcode.replace('stoses:', '')
    raw_asmcode = raw_asmcode.replace('[', '')
    raw_asmcode = raw_asmcode.replace(']', '')
    raw_asmcode = raw_asmcode.replace("- ", "-")
    raw_asmcode = raw_asmcode.replace("+", " ")
    raw_asmcode = raw_asmcode.replace("-", " -")
    raw_asmcode = raw_asmcode.replace("*", " ")

    return raw_asmcode


def instruction2vec(one_instruction, model, vectorsize):
    if not one_instruction:  # check blank
        return 0
    one_instruction = refine_asmcode(one_instruction)
    splited_instruction = one_instruction.split()

    opcode_box = splited_instruction[0]

    # operand 2 vec
    # operand_list=''.join(splited_instruction[1:])
    operand_str = one_instruction[len(opcode_box):]  # del opcode
    # operand_list=operand_list.split(',')
    operand_list = operand_str.split(',')

    operand_2_boxs = [['0', '0', '0', '0'], ['0', '0', '0', '0']]
    for idx, operand in enumerate(operand_list):
        # 0 : reg, 1 : hex_address, 2 : second reg, 3 : second int
        operands = operand.split()

        if not operands:  # empty list
            continue

        operand_list_empty = ['0', '0', '0', '0']

        for operands_one in operands:

            num_format = re.compile("[1-9]")
            isnumber = re.match(num_format, operands_one)

            # only hex
            if (operands_one[:2] == '0x') or (operands_one[:3] == '-0x'):
                operand_list_empty[1] = operands_one
            # only int DWORD PTR [ebp+eax*4-0x2c],edx -> 4!!
            elif isnumber:
                operand_list_empty[3] = operands_one
            # only reg
            elif len(operands_one):
                if operand_list_empty[0] == '0':
                    operand_list_empty[0] = operands_one
                else:
                    operand_list_empty[2] = operands_one

        if idx >= 2:
            continue
        operand_2_boxs[idx] = operand_list_empty

    zeroes_array = np.zeros(vectorsize)
    
    # 加个ret_array初始化
    ret_array = None
    try:
        ret_array = model.wv[opcode_box]

        for operand in operand_2_boxs:
            for operand_values in operand:
                if operand_values == '0':
                    ret_array = np.hstack([ret_array, zeroes_array])
                else:
                    ret_array = np.hstack([ret_array, model.wv[operand_values]])
    except Exception as e:
        print("Error!!!")
        print(opcode_box, operand_2_boxs)
        print(one_instruction)

    # print ret_array
    return ret_array
