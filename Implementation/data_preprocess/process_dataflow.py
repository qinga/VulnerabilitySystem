import W2vmodel
import os
import pandas

from Implementation.data_preprocess import clean_gadget


def parse_file(filename):
    with open(filename, "r", encoding="utf-8") as file:
        gadget = []
        gadget_val = 0
        for line in file:
            stripped = line.strip()
            if not stripped or "/" in stripped:
                continue
            if "-" * 4 in line and gadget:
                yield clean_gadget.symbolic_gadget(gadget), gadget_val
                gadget = []
            elif stripped.split()[0].isdigit():
                if gadget:
                    # Code line could start with number (somehow)
                    if stripped.isdigit():
                        gadget_val = int(stripped)
                    else:
                        gadget.append(stripped)
            else:
                gadget.append(stripped)


def parse_comfile(filename):
    with open(filename, "r", encoding="utf-8") as file:
        gadget = []
        gadget_val = 0
        i = 0
        for line in file:
            stripped = line.strip()
            if not stripped:
                continue
            if "-" * 4 in line and gadget:
                i += 1
                yield clean_gadget.symbolic_compile(gadget), gadget_val
                gadget = []
            elif stripped.split()[0].isdigit():
                if gadget:
                    if stripped.isdigit():
                        gadget_val = int(stripped)
                    else:
                        gadget.append(stripped)
            else:
                gadget.append(stripped)


def get_vectors_df(filename, vector_length=100):
    gadgets = []
    count = 0
    vectorizer = W2vmodel.GadgetVectorizer(vector_length)
    if "compile" in filename:
        da = parse_comfile(filename)
    else:
        da = parse_file(filename)
    for gadget, val in da:
        count += 1
        vectorizer.add_gadget(gadget)
        row = {"gadget": gadget, "val": val}
        gadgets.append(row)
    vectorizer.train_model()
    vectors = []
    count = 0
    for gadget in gadgets:
        count += 1
        print("Processing gadgets...", count, end="\r")
        vector = vectorizer.vectorize(gadget["gadget"])
        row = {"vector": vector, "val": gadget["val"]}
        vectors.append(row)
    df = pandas.DataFrame(vectors)
    return df


def get_fusion_vectors(file1, file2, vector_length=100):
    gadgets = []
    count = 0
    vectorizer = W2vmodel.GadgetVectorizer(vector_length)
    compile_dic = parse_comfile(file1)
    code_dic = parse_file(file2)
    for line, lines in zip(code_dic, compile_dic):
        gadget = line[0] + lines[0]
        count += 1
        vectorizer.add_gadget(gadget)
        row = {"gadget": gadget, "val": lines[1]}
        gadgets.append(row)
    vectorizer.train_model()
    vectors = []
    count = 0
    for gadget in gadgets:
        count += 1
        print("Processing gadgets...", count, end="\r")
        vector = vectorizer.vectorize(gadget["gadget"])
        row = {"vector": vector, "val": gadget["val"]}
        vectors.append(row)
    print()
    df = pandas.DataFrame(vectors)
    return df


def write_file(filename, vector_length=100):
    base = os.path.splitext(os.path.basename(filename))[0]
    path = os.path.join("../data", filename)
    vector_filename = os.path.join("../data", base + "_gadget_vectors.pkl")
    if not os.path.exists(vector_filename):
        if "fusion" in base:
            path1 = os.path.join("../data", base.split('#')[1] + ".txt")
            path2 = os.path.join("../data", base.split('#')[2] + ".txt")
            df = get_fusion_vectors(path1, path2, vector_length)
        else:
            df = get_vectors_df(path, vector_length)
        df.to_pickle(vector_filename)


def main():
    write_file("code.txt")
    write_file("compile_code.txt")
    write_file("fusion#code#compile_code.txt")


if __name__ == "__main__":
    main()
